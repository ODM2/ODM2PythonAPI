language: python
# if the https://travis-ci.org/ODM2/ODM2PythonAPI/requests ever says: missing config
# validate at: http://lint.travis-ci.org/
python:
#  - "2.6"
  - "2.7"
#  - "3.2"
#  - "3.3"
#  - "3.4"
#  - "3.5"
#  - "3.5-dev" # 3.5 development branch
#  - "nightly" # currently points to 3.6-dev
# command to install dependencies
cache:
  directories:
    - $HOME/.cache/pip/wheels
    - $HOME/virtualenv/python2.7.9
services:
  - mysql
  - postgresql
#addons:
#  mariadb: '10.1'
before_install:
#  - strace mysql 2>&1 | grep cnf
#stat("/etc/my.cnf", 0x7ffef7c8dca0)     = -1 ENOENT (No such file or directory)
#stat("/etc/mysql/my.cnf", {st_mode=S_IFREG|0644, st_size=5232, ...}) = 0
#open("/etc/mysql/my.cnf", O_RDONLY|O_CLOEXEC) = 3
#stat("/etc/mysql/conf.d/mariadb.cnf", {st_mode=S_IFREG|0644, st_size=435, ...}) = 0
#open("/etc/mysql/conf.d/mariadb.cnf", O_RDONLY|O_CLOEXEC) = 4
#stat("/etc/mysql/conf.d/mysqld_safe_syslog.cnf", {st_mode=S_IFREG|0644, st_size=36, ...}) = 0
#open("/etc/mysql/conf.d/mysqld_safe_syslog.cnf", O_RDONLY|O_CLOEXEC) = 4
#stat("/etc/mysql/conf.d/tokudb.cnf", {st_mode=S_IFREG|0644, st_size=285, ...}) = 0
#open("/etc/mysql/conf.d/tokudb.cnf", O_RDONLY|O_CLOEXEC) = 4
#stat("/home/travis/.my.cnf", 0x7ffef7c8dca0) = -1 ENOENT (No such file or directory)
#  - ls -l /etc/mariadb
  - mysqld --help --verbose
  - mysql -uroot -e 'SHOW VARIABLES WHERE Variable_Name LIKE "%dir"'
  # Default options are read from the following files in the given order:
 # /etc/my.cnf /etc/mysql/my.cnf ~/.my.cnf
#  - ls -al .my.cnf
#  - ls -al /etc/my.cnf
  - ls -al /etc/mysql/conf.d/
  - ls -al /etc/mysql/
#  - ls -al /var/lib/mysql
#  - ls -al /usr/local/etc/my.cnf.d/
#  - cat /etc/mysql/conf.d/mariadb.cnf
#  - cat /etc/mysql/conf.d/tokudb.cnf
#  - cat /etc/mysql/conf.d/mysqld_safe_syslog.cnf
  - cat /etc/mysql/debian-start
  - cat /usr/share/mysql/debian-start.inc.sh
  - cat /etc/init.d/mysql
  - sudo cat /etc/mysql/debian.cnf
  #  - cat /etc/apparmor.d/usr.sbin.mysqld
  - ls -al /etc/mysql
  - sudo service mysql stop
#  -    echo "[mysqld]" > /etc/my.cnf
#  -    echo "lower_case_table_names = 1" >> /etc/my.cnf
#  -  sudo  echo "[mariadb-10.0]" >> /etc/my.cnf
#  -  sudo  echo "lower_case_table_names = 1" >> /etc/my.cnf
  -  echo "[mysqld]" > $HOME/.my.cnf
  -  echo "lower-case-table-names = 1" >> $HOME/.my.cnf
#  -  echo "lower_case_table_names=1" >> $HOME/.my.cnf
  - cat $HOME/.my.cnf
#  -  echo "[mariadb-10.0]" >> .my.cnf
#  -  echo "lower_case_table_names = 1" >> .my.cnf
#  - sudo echo "[mysqld]" >> /etc/mysql/debian.cnf
#  - sudo echo "lower_case_table_names = 2" >> /etc/mysql/debian.cnf
  - service --status-all
#  - sudo cat /etc/mysql/debian.cnf
#  - sudo echo "[mysqld]" >> /etc/mysql/debian.cnf
#  - sudo echo "lower_case_table_names=1" >> /etc/mysql/debian.cnf
  - sudo cat /etc/mysql/debian.cnf
  - sudo sed -i '/\[mysqld\]/a lower_case_table_names = 1 ' /etc/mysql/my.cnf
  - cat /etc/mysql/my.cnf
  - sudo service mysql start
#  - sudo service mysql restart
  - mysql --verbose -e  "show variables like 'lower%';" --user=root
#  - strace mysql 2>&1 | grep cnf
  - mysql --verbose -e "CREATE USER 'ODM'@'localhost' IDENTIFIED BY 'odm';GRANT ALL PRIVILEGES ON *.* TO 'ODM'@'localhost';" --user=root
  - mysql --verbose -e "CREATE USER 'ODM'@'127.0.0.1' IDENTIFIED BY 'odm';GRANT ALL PRIVILEGES ON *.* TO 'ODM'@'127.0.0.1';" --user=root
  - mysql --verbose -e "CREATE USER 'ODM'@'%' IDENTIFIED BY 'odm';GRANT ALL PRIVILEGES ON *.* TO 'ODM'@'%';" --user=root
  - mysql  --verbose  -e "create database IF NOT EXISTS odm2;" --user=root
  - mysql -e "create database IF NOT EXISTS odm2test;" --user=root
  - psql -U postgres -c "create extension postgis"
  - psql -c 'DROP DATABASE IF EXISTS odm2test;' -U postgres;
  - psql -c 'create database odm2test;' -U postgres;
#  - psql -U postgres -d odm2test -a -f ./tests/schemas/postgresql/ODM2_for_PostgreSQL.sql
  - psql -c 'DROP DATABASE IF EXISTS odm2;' -U postgres;
  - psql -c 'create database odm2;' -U postgres;
  # patterned after: https://github.com/ptrv/gpx2spatialite/blob/master/.travis.yml
  - sudo apt-get install -y python-software-properties
  - sudo apt-add-repository -y ppa:git-core/ppa
  - sudo apt-add-repository -y ppa:ubuntugis/ppa
  - sudo apt-get update -qq
  - sudo apt-get install unixodbc  unixodbc-dev odbcinst1debian2 odbcinst
  - sudo apt-get install freetds-dev freetds-bin tdsodbc
  - sudo apt-get install libc6  e2fsprogs  # mssql driver
  # see what's installed
 # - odbcinst -j
  - ls /usr/lib/x86_64-linux-gnu/odbc/
  - echo "[FreeTDS]"> .odbcinst.ini
  - echo "Description = v0.91 with protocol v7.2">> .odbcinst.ini
  - echo "Driver = /usr/lib/x86_64-linux-gnu/odbc/libtdsodbc.so">> .odbcinst.ini
  - sudo odbcinst -i -d -f .odbcinst.ini
  - echo "[azure]" > azure.odbc
  - echo "Server = nrb8xkgxaj.database.windows.net" >> azure.odbc
  - echo "Driver      = FreeTDS" >> azure.odbc
  - echo "Database = odm2" >> azure.odbc
  - sudo odbcinst -i -s -l -f azure.odbc
  - echo "[moonstone]" > moonstone.odbc
  - echo "Server = moonstone.sdsc.edu" >> moonstone.odbc
  - echo "Driver      = FreeTDS" >> moonstone.odbc
  - echo "Database = odm2" >> moonstone.odbc
  - sudo odbcinst -i -s -l -f moonstone.odbc
  # free tds
  - sudo echo "[FreeTDS]" >> odbcinst.ini
  - sudo echo "Description = v0.91 with protocol v7.2" >> odbcinst.ini
  - sudo echo "Driver = /usr/lib/x86_64-linux-gnu/odbc/libtdsodbc.so " >> odbcinst.ini
#  - sudo echo "Setup = $HOME/oob/client/libesoobsetup.so >> odbcinst.ini
#  - sudo echo "FileUsage = 1" >> odbcinst.ini
  #- ls -al /etc/odbcinst.ini /etc/odbc.ini
  - cat /etc/odbcinst.ini
  - cat  /etc/odbc.ini
 # - ls /etc/ODBCDataSources
 # - cat  .odbc.ini #not found
  #
  - echo "[global]" > .freetds.conf
  - echo "tds version = 4.2" >> .freetds.conf
  - echo "[kyle]" >> .freetds.conf
  - echo "host = nrb8xkgxaj.database.windows.net" >> .freetds.conf
  - echo "port = 1433" >> .freetds.conf
  - echo "database=odm2" >> .freetds.conf
  - echo "[moonstone]">> .freetds.conf
  - echo "host = moonstone.sdsc.edu">> .freetds.conf
  - echo "port = 1433">> .freetds.conf
  - echo "database=odm2" >> .freetds.conf
  - cat .freetds.conf
  - sudo apt-get install mysql-client
  # Spatialiate
  - sudo apt-get install -y libproj-dev libgeos-dev libspatialite-dev
  - sudo ln -s /usr/lib/x86_64-linux-gnu/libspatialite.so /usr/lib/libspatialite.so
#  - sudo apt-get install python-scipy python-matplotlib python-pandas python-sympy python-nose
  - sudo apt-get install python-matplotlib python-pandas python-nose
  - python -m pip install pandas
  - export PYMSSQL_BUILD_WITH_BUNDLED_FREETDS=1;python -m  pip install pymssql
  - python -m  pip install mysql-python
install: # now just our code
  - pip install git+https://github.com/ODM2/geoalchemy.git@odm2#egg=geoalchemy-0.7.3
  - pip install   .
  - pip install  -r requirements_tests.txt  --allow-external pyodbc --allow-unverified pyodbc
    # pysqlite
  - pip install pysqlite
  - pip list
  - ls -al  ./tests/usecasesql/littlebearriver/sampledatabases/odm2_mysql/LBR_MySQL_SmallExample.sql ./tests/usecasesql/marchantariats/marchantariats.sql
  - mysql --user=ODM --password=odm  odm2 < ./tests/usecasesql/littlebearriver/sampledatabases/odm2_mysql/LBR_MySQL_SmallExample.sql
  - mysql --user=root  -e  "show databases;"
  - mysql --user=root  -e "select table_schema,table_name,table_rows from information_schema.tables;"
  - mysql --user=root -e   "GRANT ALL PRIVILEGES ON odm2.* TO 'ODM'@'localhost';FLUSH PRIVILEGES;"
  - mysql --user=ODM --password=odm odm2 -e "use odm2; Select * from Variables;"
  - mysql --user=ODM --password=odm odm2 -e "use odm2; Select * from variables;"
#  - mysql --user=ODM --password=odm odm2 -e "Select * from odm2.Variables;"
  - mysql --user=ODM --password=odm  -e "Select * from odm2.Variables;"
  - mysql --user=ODM --password=odm  -e "Select * from odm2.variables;"
# add -a to psql to see full log, -q is quiet
  - psql -U postgres -q  -f ./tests/usecasesql/marchantariats/marchantariats.sql
#  - netstat output | grep mysql
  - mysql --user root -e   "SELECT User, Host FROM mysql.user;"

# don't forget to open up the azure mssql server to these addreses
# https://docs.travis-ci.com/user/ip-addresses/

# command to run tests
script:
# just the connection part
  - py.test tests/test_SessionFactory.py
  - py.test tests/test_connection.py
  - py.test

